>>> add_integer = __import__("0-add_integer").add_integer 
>>> m = __import__("0-add_integer").__doc__ 
>>> len(m) > 1 
True 
>>> f = __import__("0-add_integer").add_integer.__doc__ 
>>> len(f) > 1 
True 
>>> add_integer(2, 3) 
5 
>>> add_integer(2, -4) 
-2 
>>> add_integer(-6, 8) 
2 
>>> [add_integer(i, i ** 2) for i in range(6)] 
[0, 2, 6, 12, 20, 30] 
>>> add_integer(2.1, 4) 
6 
>>> add_integer(5, 7.8) 
12 
>>> add_integer(2.45, 3.1) 
5 
>>> add_integer(1, float('nan')) 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
  File "/mnt/dev/Development/personal/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 9, in add_integer 
    b = int(b) 
ValueError: cannot convert float NaN to integer 
>>> add_integer(1, float('inf')) 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
  File "/mnt/dev/Development/personal/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 9, in add_integer 
    b = int(b) 
OverflowError: cannot convert float infinity to integer 
>>> add_integer(999999999999999999999999999999, 1) 
1000000000000000000000000000000 
>>> add_integer([1], 2) 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
  File "/mnt/dev/Development/personal/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer 
    raise TypeError("a must be an integer") 
TypeError: a must be an integer 
>>> add_integer(3, "2") 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
  File "/mnt/dev/Development/personal/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 13, in add_integer 
    raise TypeError("b must be an integer") 
TypeError: b must be an integer 
>>> add_integer((2,), {"key": "value"}) 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
  File "/mnt/dev/Development/personal/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer 
    raise TypeError("a must be an integer") 
TypeError: a must be an integer 
>>> add_integer(True, 1) 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
  File "/mnt/dev/Development/personal/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer 
    raise TypeError("a must be an integer") 
TypeError: a must be an integer 
>>> add_integer(0, False) 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
  File "/mnt/dev/Development/personal/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 13, in add_integer 
    raise TypeError("b must be an integer") 
TypeError: b must be an integer 
>>> add_integer() 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
TypeError: add_integer() missing 1 required positional argument: 'a' 
>>> add_integer(1) 
99 
>>> add_integer(1, 2, 3) 
Traceback (most recent call last): 
  File "<stdin>", line 1, in <module> 
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given 
